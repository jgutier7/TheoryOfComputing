#!/usr/bin/env python3

import regular
import nfa
import regexp
import sys
from re_groups import re_groups


def match(r, w):
    tree = regexp.parse(r)
    m = regexp.to_nfa(tree)
    flag, path = nfa.match_dfs(m, w)

    if path:
        return True

#c = list of commands, w is input string
def msed(c, w):
    
    #labels[name of label] = where is the label
    labels = {}
    #add dictionaries for branches/ replacement?
    string = ''
    
    #add labels to labels dict
    for i in range(len(c)):
        #check if command is label (:) and that that label has not appeared twice
        if c[i][0] == ':':
            if c[i][1:] in labels:
                #error if same label appears twice
                return 1
            labels[c[i][1:]] = i
    
    #iterate through c
    for i in range(len(c)):
        #skip if it is defining a label
        if c[i][0] == ':':
            continue
        
        #branch command
        if c[i][0] == '/':
            #run matching,if it returns accept
            j = 1
            while c[i][j] != '/':
                string += c[i][j]
                j+=1
            regexp = string
            string = ''
            j += 2
            label = c[i][j:]
            #if entire string matches regex
            if match(regexp, w):
               i = labels[label]
            else:
                continue
               

        #substitution command
        if c[i][0] == 's':
            string = ''
            j = 2
            #run matching, if it returns accept
            while c[i][j] != '/':
                string += c[i][j]
                j+=1
            regexp = string   
            j += 1
            replace = c[i][j:-1]           
            #if entire string matches regex
            flag, groups = re_groups(regexp, w)
            if match(regexp, w):
                # if replace[:2] == '\g':
                #     k = ''
                #     j = 3
                #     while replace[j] != '>':
                #         k += replace[j]
                #     k = int(k)
                #     w = groups[k]
                i = 0
                to_replace = ''
                while replace and i < len(replace) - 1 and replace[i] != '/' :
                    if replace[i] == '\\':
                        i += 1
                        if replace[i] == 'g' and replace[i+1] == '<':
                            # TODO: Jacob
                            if replace[i+3].isdigit() and i < len(replace)-1:
                                num = int(replace[i+2:i+4])
                                to_replace += groups[num]
                                i += 4
                            else:
                                num = int(replace[i+2]) # \g<k>: expands to the contents of group k
                                to_replace += groups[num]
                                i += 3

                            # If you want the contents of group 1 followed by the character 0, then write \g<1>0 instead
                            if replace and i < len(replace) - 1 and replace[i] == '>' and replace[i+1].isdigit(): 
                                to_replace += replace[i+1]
                                i += 1
                            
                            
                        # TODO: Jacob
                        else: # else it's not a g command
                            if i < len(replace)-1 and replace[i].isdigit() and replace[i+1].isdigit():
                                num = int(replace[i:i+2]) # if it's a double digit group 
                                to_replace += groups[num]
                                i += 1 
                            else:
                                if int(replace[i]) not in groups:
                                    to_replace += ''    
                                else:
                                    to_replace += groups[int(replace[i])]
                        
                    else:
                        to_replace += replace[i]
                        
                    if i != len(replace) - 1: 
                        i += 1
                    else: break

                w = to_replace
    return w
                            
def main():
    if len(sys.argv) < 2: return #error if not enough arguments
    c = [] #list of commands
    arg_num = 1
    if sys.argv[arg_num] == '-f':
        # read commands from a file
        arg_num += 1
        with open(sys.argv[2]) as f:
            c = f.readlines() # saves commands as a list from the file

    while sys.argv[arg_num] == '-e':
        arg_num += 1
        c.append(sys.argv[arg_num])
        if arg_num == len(sys.argv) - 1:
            break
        arg_num += 1
    
    if arg_num == len(sys.argv):
        with open(sys.argv[arg_num]) as f:
            w = f.read() # saves input string as a string from the file
    else:
        for line in sys.stdin:
            w = line.rstrip() # saves input string as a string from stdin
            break
    
    c = list(dict.fromkeys(c)) #remove duplicates

    # print(c)
    # print(w)
        
    #read w from file specified by file, if none, read from stdin
    p = msed(c, w)
    print(p)

if __name__ == '__main__':
    main()
